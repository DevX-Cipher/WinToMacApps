#include <QFile>
#include <QTextStream>
#include <qdir.h>
#include "toolchaingenerator.h"

bool ToolchainGenerator::writeToolchainFile(const QString &filePath,
                                            const QString &sdkPath,
                                            const QString &clangPath,
                                            const QString &arch,
                                            const QString &deployTarget,
                                            const QString &qt6Path)
{
    QFile file(filePath);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return false;

    QTextStream out(&file);

    out << "# macosx-toolchain.cmake - generated by GUI\n\n";

    out << "set(CMAKE_SYSTEM_NAME Darwin)\n";
    out << "set(CMAKE_SYSTEM_PROCESSOR " << arch << ")\n\n";

    // Construct full paths to clang and clang++.exe
    QString clangDir = QDir(clangPath).absolutePath();
    QString clangExe = QDir(clangDir).filePath("clang.exe").replace("\\", "/");
    QString clangxxExe = QDir(clangDir).filePath("clang++.exe").replace("\\", "/");
    QString qt6MacDir = QDir(qt6Path).absolutePath().replace("\\", "/");

    out << "set(CMAKE_C_COMPILER \"" << clangExe << "\")\n";
    out << "set(CMAKE_CXX_COMPILER \"" << clangxxExe << "\")\n";
    out << "set(CMAKE_OBJC_COMPILER \"" << clangExe << "\")\n";
    out << "set(CMAKE_PREFIX_PATH \"" << qt6MacDir << "\" CACHE PATH \"Path to Qt6 installation for macOS\")\n";

    out << "if(NOT EXISTS \"${CMAKE_C_COMPILER}\" OR NOT EXISTS \"${CMAKE_CXX_COMPILER}\")\n";
    out << "    message(FATAL_ERROR \"Clang compilers not found at specified path.\")\n";
    out << "endif()\n\n";

    out << "set(ENV{CFLAGS} \"\")\n";
    out << "set(ENV{CXXFLAGS} \"\")\n\n";

    out << "set(CMAKE_OSX_DEPLOYMENT_TARGET \"" << deployTarget << "\")\n";
    out << "set(ENV{MACOSX_SDK} \"" << sdkPath << "\")\n";
    out << "set(CMAKE_OSX_SYSROOT \"$ENV{MACOSX_SDK}\")\n\n";

    out << "set(CMAKE_OSX_ARCHITECTURES \"" << arch << "\")\n\n";

    out << "set(target_triple \"${CMAKE_OSX_ARCHITECTURES}-apple-darwin${CMAKE_OSX_DEPLOYMENT_TARGET}\")\n\n";

    out << "set(CMAKE_C_FLAGS \"-target ${target_triple} --sysroot=${CMAKE_OSX_SYSROOT}\" CACHE STRING \"C flags\")\n";
    out << "set(CMAKE_CXX_FLAGS \"${CMAKE_C_FLAGS}\" CACHE STRING \"C++ flags\")\n";
    out << "set(CMAKE_OBJC_FLAGS \"-target ${target_triple} --sysroot=${CMAKE_OSX_SYSROOT}\" CACHE STRING \"Objective-C flags\")\n\n";

    out << "set(CMAKE_EXE_LINKER_FLAGS \"-target ${target_triple} --sysroot=${CMAKE_OSX_SYSROOT} "
        << "-L${CMAKE_OSX_SYSROOT}/usr/lib -fuse-ld=lld -framework Foundation -framework Cocoa "
        << "-Wl,-headerpad_max_install_names\" CACHE STRING \"Linker flags\")\n";
    out << "set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\" CACHE STRING \"Shared library linker flags\")\n";
    out << "set(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}\" CACHE STRING \"Module linker flags\")\n\n";

    out << "message(STATUS \"Toolchain: SDK = ${CMAKE_OSX_SYSROOT}\")\n";
    out << "message(STATUS \"Toolchain: Deployment Target = ${CMAKE_OSX_DEPLOYMENT_TARGET}\")\n";
    out << "message(STATUS \"Toolchain: Architectures = ${CMAKE_OSX_ARCHITECTURES}\")\n";

    file.close();
    return true;
}
